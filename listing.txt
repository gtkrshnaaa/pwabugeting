===== ./app.js =====
// ===== ./app.js =====
// app.js - Logika Utama Aplikasi Budgeting

document.addEventListener('DOMContentLoaded', () => {
    // --- Seleksi Elemen DOM ---
    const setupButton = document.getElementById('setup-button');
    const addExpenseButton = document.getElementById('add-expense-button');
    const setupModal = document.getElementById('setup-modal');
    const expenseModal = document.getElementById('expense-modal');
    const confirmResetModal = document.getElementById('confirm-reset-modal');
    const modalOverlay = document.getElementById('modal-overlay');

    // Form
    const setupForm = document.getElementById('setup-form');
    const expenseForm = document.getElementById('expense-form');

    // Tombol Modal
    const closeSetupModalBtn = document.getElementById('close-setup-modal');
    const closeExpenseModalBtn = document.getElementById('close-expense-modal');
    const addCategoryFieldBtn = document.getElementById('add-category-field-button');

    // Tombol Aksi
    const resetDataBtn = document.getElementById('reset-data-button');
    const cancelResetBtn = document.getElementById('cancel-reset-btn');
    const confirmResetBtn = document.getElementById('confirm-reset-btn');
    const exportJsonBtn = document.getElementById('export-json-btn');
    const exportCsvBtn = document.getElementById('export-csv-btn');

    // --- Event Listeners ---
    setupButton.addEventListener('click', openSetupModal);
    addExpenseButton.addEventListener('click', () => showModal(expenseModal));
    
    // Event Listener Terpusat untuk Menutup Modal
    [closeSetupModalBtn, closeExpenseModalBtn, modalOverlay, cancelResetBtn].forEach(el => {
        el.addEventListener('click', closeAllModals);
    });

    addCategoryFieldBtn.addEventListener('click', () => createCategoryInput());
    setupForm.addEventListener('submit', handleSetupForm);
    expenseForm.addEventListener('submit', handleExpenseForm);

    resetDataBtn.addEventListener('click', () => {
        hideModal(setupModal); // Sembunyikan modal setup
        showModal(confirmResetModal); // Tampilkan modal konfirmasi
    });
    confirmResetBtn.addEventListener('click', handleDataReset);

    // Event listener untuk tombol ekspor
    exportJsonBtn.addEventListener('click', exportToJSON);
    exportCsvBtn.addEventListener('click', exportToCSV);

    // --- Inisialisasi ---
    registerServiceWorker();
    initPwaInstall();
    renderUI();
});

// --- Fungsi Utama Render ---
async function renderUI() {
    await renderSummary();
    await renderCategories();
    await renderExpenseHistory();
    await populateCategoryDropdown();
    checkIfInitialSetupNeeded();
}

async function renderSummary() {
    const limit = await getConfig('totalBudget') || 0;
    const allExpenses = await getExpenses();
    const spent = allExpenses.reduce((sum, exp) => sum + exp.amount, 0);
    const remaining = limit - spent;

    document.getElementById('summary-limit').textContent = formatCurrency(limit);
    document.getElementById('summary-spent').textContent = formatCurrency(spent);
    document.getElementById('summary-remaining').textContent = formatCurrency(remaining);
}

async function renderCategories() {
    const categoryListEl = document.getElementById('category-list');
    const categories = await getCategories();
    if (categories.length === 0) {
        categoryListEl.innerHTML = `<p class="text-center text-gray-500 text-sm">Belum ada kategori. Klik 'Atur' untuk memulai.</p>`;
        return;
    }
    categoryListEl.innerHTML = '';
    for (const cat of categories) {
        const expensesForCat = await getExpensesByCategoryId(cat.id);
        const spentOnCat = expensesForCat.reduce((sum, exp) => sum + exp.amount, 0);
        const progress = cat.limit > 0 ? (spentOnCat / cat.limit) * 100 : 0;
        const item = document.createElement('div');
        item.innerHTML = `
            <div class="flex justify-between items-center mb-1">
                <span class="font-semibold text-gray-700">${cat.name}</span>
                <span class="text-sm text-gray-500">${formatCurrency(spentOnCat)} / ${formatCurrency(cat.limit)}</span>
            </div>
            <div class="w-full bg-violet-100 rounded-full h-2.5">
                <div class="bg-gradient-to-r from-purple-300 to-violet-500 h-2.5 rounded-full" style="width: ${Math.min(100, progress)}%"></div>
            </div>`;
        categoryListEl.appendChild(item);
    }
}

async function renderExpenseHistory() {
    const historyEl = document.getElementById('expense-history');
    const expenses = (await getExpenses()).reverse();
    if (expenses.length === 0) {
        historyEl.innerHTML = `<p class="text-center text-gray-500 text-sm">Belum ada pengeluaran.</p>`;
        return;
    }
    historyEl.innerHTML = '';
    const categories = await getCategories();
    const categoryMap = new Map(categories.map(cat => [cat.id, cat.name]));
    expenses.slice(0, 15).forEach(exp => { // Tampilkan 15 terakhir
        const item = document.createElement('div');
        item.className = "flex justify-between items-center text-sm";
        item.innerHTML = `
            <div>
                <p class="font-semibold">${exp.description || 'Pengeluaran'}</p>
                <p class="text-xs text-gray-500">${categoryMap.get(exp.categoryId) || 'Lainnya'}</p>
            </div>
            <span class="font-semibold text-red-500">${formatCurrency(exp.amount)}</span>`;
        historyEl.appendChild(item);
    });
}

// --- Fungsi Modal & Form ---

// Fungsi baru untuk menutup semua modal dan overlay
function closeAllModals() {
    const overlay = document.getElementById('modal-overlay');
    // Cek dulu apakah ada modal yang terbuka untuk ditutup
    if (!overlay.classList.contains('hidden')) {
        const setupModal = document.getElementById('setup-modal');
        const expenseModal = document.getElementById('expense-modal');
        const confirmResetModal = document.getElementById('confirm-reset-modal');
        
        hideModal(setupModal);
        hideModal(expenseModal);
        hideModal(confirmResetModal);
        // Sembunyikan overlay setelah animasi modal selesai
        setTimeout(() => overlay.classList.add('hidden'), 200);
    }
}

function showModal(modalEl) {
    const modalContent = modalEl.querySelector('div');
    document.getElementById('modal-overlay').classList.remove('hidden');
    modalEl.classList.remove('hidden');
    setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
    }, 10);
}

function hideModal(modalEl) {
    // Jangan lakukan apa-apa jika modal sudah hidden
    if (!modalEl || modalEl.classList.contains('hidden')) return;

    const modalContent = modalEl.querySelector('div');
    modalContent.classList.remove('scale-100', 'opacity-100');
    modalContent.classList.add('scale-95', 'opacity-0');
    setTimeout(() => {
        modalEl.classList.add('hidden');
        // Logika overlay dipindahkan ke closeAllModals agar lebih terpusat
    }, 200);
}

async function openSetupModal() {
    const totalBudgetInput = document.getElementById('total-budget');
    const categoryFieldsContainer = document.getElementById('category-fields');

    // Ambil data saat ini dari DB
    const currentBudget = await getConfig('totalBudget');
    const currentCategories = await getCategories();

    // Isi form
    totalBudgetInput.value = currentBudget || '';
    categoryFieldsContainer.innerHTML = ''; // Kosongkan field kategori lama
    currentCategories.forEach(cat => {
        createCategoryInput(cat.id, cat.name, cat.limit); // Panggil dengan data lengkap
    });

    showModal(document.getElementById('setup-modal'));
}

function createCategoryInput(id = null, name = '', limit = '') {
    const container = document.getElementById('category-fields');
    const fieldWrapper = document.createElement('div');
    fieldWrapper.className = 'flex gap-2 items-center category-entry'; // tambah class
    // Tambahkan data-id jika ada
    if (id) {
        fieldWrapper.dataset.id = id;
    }
    fieldWrapper.innerHTML = `
        <input type="text" name="category_name" class="w-2/3 p-2 border border-violet-200 rounded-lg" placeholder="Nama Kategori" value="${name}" required>
        <input type="number" name="category_limit" class="w-1/3 p-2 border border-violet-200 rounded-lg" placeholder="Limit" value="${limit}" required>
        <button type="button" class="text-red-500 remove-cat-btn p-1">&times;</button>`;
    container.appendChild(fieldWrapper);
    fieldWrapper.querySelector('.remove-cat-btn').addEventListener('click', () => fieldWrapper.remove());
}

async function handleSetupForm(e) {
    e.preventDefault();
    const totalBudget = parseFloat(document.getElementById('total-budget').value);
    if (isNaN(totalBudget) || totalBudget < 0) {
        alert('Total anggaran harus diisi dengan angka yang valid.');
        return;
    }

    const categoryEntries = document.querySelectorAll('.category-entry');
    let totalLimit = 0;
    const formCategoryIds = [];

    // Validasi total limit dulu
    for (const entry of categoryEntries) {
        const limit = parseFloat(entry.querySelector('input[name="category_limit"]').value);
        if (!isNaN(limit) && limit > 0) {
            totalLimit += limit;
        }
    }

    if (totalLimit > totalBudget) {
        alert('Total limit kategori tidak boleh melebihi total anggaran bulanan!');
        return;
    }

    // Simpan budget utama
    await setConfig('totalBudget', totalBudget);

    // Ambil ID kategori yang ada di DB sebelum diubah
    const originalCategories = await getCategories();
    const originalCategoryIds = originalCategories.map(cat => cat.id);

    // Proses setiap entri di form
    for (const entry of categoryEntries) {
        const id = entry.dataset.id ? parseInt(entry.dataset.id, 10) : null;
        const name = entry.querySelector('input[name="category_name"]').value.trim();
        const limit = parseFloat(entry.querySelector('input[name="category_limit"]').value);

        if (name && !isNaN(limit) && limit > 0) {
            if (id) {
                // Ini kategori lama (UPDATE)
                await updateCategory({ id, name, limit });
                formCategoryIds.push(id);
            } else {
                // Ini kategori baru (ADD)
                await addCategory({ name, limit });
            }
        }
    }

    // Cari kategori yang dihapus (ada di DB tapi tidak ada di form)
    const deletedIds = originalCategoryIds.filter(id => !formCategoryIds.includes(id));
    for (const id of deletedIds) {
        await deleteCategory(id);
    }

    closeAllModals(); // Gunakan fungsi baru kita
    await renderUI();
}

async function handleExpenseForm(e) {
    e.preventDefault();
    const amount = parseFloat(document.getElementById('expense-amount').value);
    const categoryId = parseInt(document.getElementById('expense-category').value, 10);
    const description = document.getElementById('expense-desc').value.trim();
    if (isNaN(amount) || amount <= 0 || isNaN(categoryId)) {
        alert('Mohon isi jumlah dan kategori dengan benar.');
        return;
    }
    await addExpense({ amount, categoryId, description, date: new Date().toISOString() });
    document.getElementById('expense-form').reset();
    closeAllModals();
    await renderUI();
}

async function handleDataReset() {
    await resetDatabase();
    closeAllModals();
    await renderUI(); // Re-render UI yang sekarang akan kosong
}

// --- Fungsi Bantuan & PWA ---
async function checkIfInitialSetupNeeded() {
    const budget = await getConfig('totalBudget');
    if (budget === null) { // Hanya tampilkan jika belum pernah di-setup sama sekali
        openSetupModal();
        document.getElementById('close-setup-modal').classList.add('hidden');
    } else {
        document.getElementById('close-setup-modal').classList.remove('hidden');
    }
}

async function populateCategoryDropdown() {
    const selectEl = document.getElementById('expense-category');
    const categories = await getCategories();
    selectEl.innerHTML = '<option value="" disabled selected>Pilih kategori...</option>';
    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat.id;
        option.textContent = cat.name;
        selectEl.appendChild(option);
    });
}

// Kode PWA (tidak berubah dari versi sebelumnya)
function registerServiceWorker() {
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('./service-worker.js')
                .then(reg => console.log('Service Worker terdaftar.', reg))
                .catch(err => console.error('Gagal mendaftarkan Service Worker:', err));
        });
    }
}
let deferredPrompt;
function initPwaInstall() {
    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        const installContainer = document.getElementById('install-container');
        installContainer.innerHTML = '';
        const installButton = document.createElement('button');
        installButton.textContent = 'Pasang Aplikasi Dompet Damai';
        installButton.className = 'px-4 py-2 bg-violet-500 text-white font-semibold rounded-lg shadow-md hover:bg-violet-600 transition';
        installContainer.appendChild(installButton);
        installButton.addEventListener('click', () => {
            installButton.style.display = 'none';
            deferredPrompt.prompt();
            deferredPrompt.userChoice.then(() => { deferredPrompt = null; });
        });
    });
}
===== ./db.js =====
// ===== ./db.js =====
// db.js - Skema Database Baru untuk Pelacakan Pengeluaran

const DB_NAME = 'DompetDamaiDB-v2';
const DB_VERSION = 1;
const STORES = {
    CONFIG: 'config',
    CATEGORIES: 'categories',
    EXPENSES: 'expenses'
};

let db;

async function initDB() {
    if (db) return db;

    db = await idb.openDB(DB_NAME, DB_VERSION, {
        upgrade(db) {
            if (!db.objectStoreNames.contains(STORES.CONFIG)) {
                db.createObjectStore(STORES.CONFIG, { keyPath: 'key' });
            }
            if (!db.objectStoreNames.contains(STORES.CATEGORIES)) {
                db.createObjectStore(STORES.CATEGORIES, { keyPath: 'id', autoIncrement: true });
            }
            if (!db.objectStoreNames.contains(STORES.EXPENSES)) {
                const expenseStore = db.createObjectStore(STORES.EXPENSES, { keyPath: 'id', autoIncrement: true });
                expenseStore.createIndex('by_category', 'categoryId');
                expenseStore.createIndex('by_date', 'date');
            }
        },
    });
    console.log('Database initialized successfully.');
    return db;
}

// --- Fungsi Config ---
async function setConfig(key, value) { return (await initDB()).put(STORES.CONFIG, { key, value }); }
async function getConfig(key) {
    const result = await (await initDB()).get(STORES.CONFIG, key);
    return result ? result.value : null;
}

// --- Fungsi Categories ---
async function clearCategories() { return (await initDB()).clear(STORES.CATEGORIES); }
async function addCategory(category) { return (await initDB()).add(STORES.CATEGORIES, category); }
async function getCategories() { return (await initDB()).getAll(STORES.CATEGORIES); }
async function updateCategory(category) { return (await initDB()).put(STORES.CATEGORIES, category); }
async function deleteCategory(id) { return (await initDB()).delete(STORES.CATEGORIES, id); }


// --- Fungsi Expenses ---
async function addExpense(expense) { return (await initDB()).add(STORES.EXPENSES, expense); }
async function getExpenses() { return (await initDB()).getAllFromIndex(STORES.EXPENSES, 'by_date'); }
async function getExpensesByCategoryId(categoryId) { return (await initDB()).getAllFromIndex(STORES.EXPENSES, 'by_category', categoryId); }


// --- FUNGSI RESET BARU ---
/**
 * Menghapus semua data dari semua object store.
 */
async function resetDatabase() {
    const db = await initDB();
    return Promise.all([
        db.clear(STORES.CONFIG),
        db.clear(STORES.CATEGORIES),
        db.clear(STORES.EXPENSES)
    ]);
}
===== ./.gitignore =====

===== ./icons/icon-128x128.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-144x144.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-152x152.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-192x192.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-256x256.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-384x384.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-48x48.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-512x512.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-72x72.png =====
[file gambar: isi tidak ditampilkan]

===== ./icons/icon-96x96.png =====
[file gambar: isi tidak ditampilkan]

===== ./index.html =====
<!-- index.html -->
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budgeting PWA</title>
    
    <link rel="manifest" href="./manifest.json">
    <meta name="theme-color" content="#8b5cf6">
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        body { font-family: 'Poppins', sans-serif; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f5f3ff; }
        ::-webkit-scrollbar-thumb { background: #a78bfa; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #8b5cf6; }
    </style>
    
    <script src="https://cdn.jsdelivr.net/npm/idb@7/build/umd.js"></script>
    <!-- Pastikan utils.js dimuat sebelum app.js -->
    <script src="./utils.js" defer></script>
    <script src="./db.js" defer></script>
    <script src="./app.js" defer></script>
</head>
<body class="bg-violet-50 text-gray-800">

    <div id="app-container" class="max-w-md mx-auto p-4 min-h-screen">
        <header class="text-center my-6">
            <h1 class="text-3xl font-bold text-violet-700">Budgeting PWA</h1>
            <p class="text-violet-600">Catat pengeluaran, tenangkan pikiran.</p>
        </header>

        <main id="main-content" class="space-y-6">
            <section id="summary-card" class="bg-white p-5 rounded-2xl shadow-md space-y-4">
                 <h2 class="text-lg font-semibold text-violet-800 border-b pb-2 mb-4">Ringkasan Bulan Ini</h2>
                 <div class="flex flex-col space-y-4 sm:space-y-0 sm:grid sm:grid-cols-3 sm:gap-4">
                     <div class="flex sm:flex-col justify-between items-center sm:items-start sm:text-center p-2 rounded-lg">
                         <p class="text-sm text-gray-500">Anggaran</p>
                         <p id="summary-limit" class="font-bold text-lg text-violet-600">Rp 0</p>
                     </div>
                     <div class="flex sm:flex-col justify-between items-center sm:items-start sm:text-center p-2 rounded-lg">
                         <p class="text-sm text-gray-500">Terpakai</p>
                         <p id="summary-spent" class="font-bold text-lg text-red-500">Rp 0</p>
                     </div>
                     <div class="flex sm:flex-col justify-between items-center sm:items-start sm:text-center p-2 rounded-lg">
                         <p class="text-sm text-gray-500">Sisa</p>
                         <p id="summary-remaining" class="font-bold text-lg text-green-600">Rp 0</p>
                     </div>
                 </div>
            </section>
            
            <section id="category-section" class="bg-white p-5 rounded-2xl shadow-md">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-violet-800">Alokasi Dana</h2>
                    <button id="setup-button" class="text-violet-600 font-semibold text-sm">+ Atur</button>
                </div>
                <div id="category-list" class="space-y-4"></div>
            </section>
            
            <section id="history-section" class="bg-white p-5 rounded-2xl shadow-md">
                 <h2 class="text-lg font-semibold text-violet-800 mb-4">Riwayat Pengeluaran</h2>
                 <div id="expense-history" class="space-y-3 max-h-60 overflow-y-auto"></div>
            </section>

            <!-- Bagian Ekspor Data (Baru) -->
            <section id="export-section" class="bg-white p-5 rounded-2xl shadow-md">
                 <h2 class="text-lg font-semibold text-violet-800 mb-4">Opsi Data</h2>
                 <p class="text-sm text-gray-500 mb-4">Simpan cadangan data Anda secara lokal.</p>
                 <div class="flex gap-4">
                    <button id="export-json-btn" class="w-full py-2 bg-violet-100 text-violet-700 font-semibold rounded-lg hover:bg-violet-200 transition">Ekspor JSON</button>
                    <button id="export-csv-btn" class="w-full py-2 bg-violet-100 text-violet-700 font-semibold rounded-lg hover:bg-violet-200 transition">Ekspor CSV</button>
                 </div>
            </section>
        </main>

        <div class="fixed bottom-6 right-6">
            <button id="add-expense-button" class="bg-violet-500 text-white w-14 h-14 rounded-full shadow-lg flex items-center justify-center text-3xl font-light hover:bg-violet-600 transition-transform transform hover:scale-110">+</button>
        </div>
        
        <footer id="install-container" class="text-center p-4"></footer>
    </div>

    <!-- MODALS -->
    <div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-40 hidden z-40"></div>
    
    <div id="setup-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-violet-50 w-full max-w-sm p-6 rounded-2xl shadow-xl space-y-4 transform transition-all scale-95 opacity-0">
             <h3 class="text-xl font-semibold text-violet-800">Atur Anggaran</h3>
             <form id="setup-form" class="space-y-4">
                 <div>
                     <label for="total-budget" class="text-sm font-medium text-gray-600">Total Anggaran Bulanan</label>
                     <input type="number" id="total-budget" class="mt-1 w-full p-2 border border-violet-200 rounded-lg focus:ring-violet-500 focus:border-violet-500" placeholder="5000000">
                 </div>
                 <hr>
                 <div class="flex justify-between items-center">
                    <h4 class="text-lg font-semibold text-violet-700">Kategori</h4>
                    <button type="button" id="add-category-field-button" class="text-sm bg-violet-200 text-violet-800 px-3 py-1 rounded-full">+ Tambah</button>
                 </div>
                 <div id="category-fields" class="space-y-2 max-h-40 overflow-y-auto"></div>
                 <div class="flex gap-4 pt-4 border-t mt-4">
                    <button type="button" id="close-setup-modal" class="w-full py-2 bg-gray-200 text-gray-700 rounded-lg">Batal</button>
                    <button type="submit" class="w-full py-2 bg-violet-500 text-white rounded-lg">Simpan</button>
                 </div>
             </form>
             <div class="text-center pt-4">
                <button id="reset-data-button" class="text-sm text-red-600 hover:text-red-800">Reset Semua Data Aplikasi</button>
             </div>
        </div>
    </div>
    
    <div id="expense-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-violet-50 w-full max-w-sm p-6 rounded-2xl shadow-xl space-y-4 transform transition-all scale-95 opacity-0">
            <h3 class="text-xl font-semibold text-violet-800">Catat Pengeluaran</h3>
            <form id="expense-form" class="space-y-4">
                 <div>
                     <label for="expense-amount" class="text-sm font-medium text-gray-600">Jumlah</label>
                     <input type="number" id="expense-amount" class="mt-1 w-full p-2 border border-violet-200 rounded-lg" required>
                 </div>
                 <div>
                     <label for="expense-category" class="text-sm font-medium text-gray-600">Pilih Kategori</label>
                     <select id="expense-category" class="mt-1 w-full p-2 border border-violet-200 rounded-lg bg-white" required></select>
                 </div>
                 <div>
                     <label for="expense-desc" class="text-sm font-medium text-gray-600">Deskripsi (Opsional)</label>
                     <input type="text" id="expense-desc" class="mt-1 w-full p-2 border border-violet-200 rounded-lg" placeholder="Makan siang">
                 </div>
                 <div class="flex gap-4 pt-4">
                    <button type="button" id="close-expense-modal" class="w-full py-2 bg-gray-200 text-gray-700 rounded-lg">Batal</button>
                    <button type="submit" class="w-full py-2 bg-violet-500 text-white rounded-lg">Catat</button>
                 </div>
            </form>
        </div>
    </div>
    
    <div id="confirm-reset-modal" class="fixed inset-0 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white w-full max-w-sm p-6 rounded-2xl shadow-xl space-y-4 text-center transform transition-all scale-95 opacity-0">
            <h3 class="text-xl font-semibold text-red-600">Anda Yakin?</h3>
            <p class="text-gray-600">Semua data anggaran, kategori, dan riwayat pengeluaran akan dihapus permanen. Tindakan ini tidak dapat dibatalkan.</p>
            <div class="flex gap-4 pt-4">
                <button type="button" id="cancel-reset-btn" class="w-full py-2 bg-gray-200 text-gray-700 rounded-lg">Batal</button>
                <button type="button" id="confirm-reset-btn" class="w-full py-2 bg-red-500 text-white rounded-lg">Ya, Hapus Semua</button>
            </div>
        </div>
    </div>

</body>
</html>

===== ./listing.txt =====

===== ./makefile =====
# Makefile untuk mencetak semua file, kecuali:
# - isi file gambar tidak ditampilkan (hanya path)

.PHONY: list export

list:
	@find . -type f ! -path "./.git/*" | sort | while read file; do \
		echo "===== $$file ====="; \
		if file "$$file" | grep -qE 'image|bitmap' && ! [[ "$$file" =~ ^./icons/ ]]; then \
			echo "[file gambar: isi tidak ditampilkan]"; \
		else \
			cat "$$file"; \
		fi; \
		echo ""; \
	done

export:
	@find . -type f ! -path "./.git/*" | sort | while read file; do \
		echo "===== $$file ====="; \
		if file "$$file" | grep -qE 'image|bitmap' && ! [[ "$$file" =~ ^./icons/ ]]; then \
			echo "[file gambar: isi tidak ditampilkan]"; \
		else \
			cat "$$file"; \
		fi; \
		echo ""; \
	done > listing.txt
	@echo "Listing file sudah diekspor ke listing.txt"
===== ./manifest.json =====
{
  "name": "Budgeting PWA",
  "short_name": "Budgeting",
  "description": "Aplikasi pelacak pengeluaran yang simpel, dan bekerja offline.",
  "start_url": "./index.html",
  "display": "standalone",
  "background_color": "#f5f3ff",
  "theme_color": "#8b5cf6",
  "orientation": "portrait-primary",
  "icons": [
    {
      "src": "./icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "./icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ]
}

===== ./service-worker.js =====
// service-worker.js
const CACHE_NAME = 'dompet-damai-cache-v6';
const ASSETS_TO_CACHE = [
    './',
    './index.html',
    './db.js',
    './app.js',
    './utils.js', // Memastikan utils.js di-cache
    './manifest.json',
    'https://cdn.tailwindcss.com',
    'https://cdn.jsdelivr.net/npm/idb@7/build/umd.js',
    'https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap',
    './icons/icon-192x192.png',
    './icons/icon-512x512.png'
];

// Event: Install
// Menyimpan semua aset penting ke dalam cache saat service worker diinstal.
self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('Caching essential assets.');
                return cache.addAll(ASSETS_TO_CACHE);
            })
    );
    self.skipWaiting(); // Memaksa service worker baru untuk aktif segera.
});

// Event: Activate
// Membersihkan cache lama yang sudah tidak terpakai.
self.addEventListener('activate', event => {
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cache => {
                    if (cache !== CACHE_NAME) {
                        console.log('Deleting old cache:', cache);
                        return caches.delete(cache);
                    }
                })
            );
        })
    );
    return self.clients.claim(); // Mengambil kontrol halaman yang terbuka.
});

// Event: Fetch
// Menentukan bagaimana aplikasi merespon permintaan jaringan.
// Strategi: Network First, Fallback to Cache.
self.addEventListener('fetch', event => {
    // Abaikan request selain GET
    if (event.request.method !== 'GET') return;
    
    event.respondWith(
        // Coba ambil dari jaringan terlebih dahulu
        fetch(event.request).catch(() => {
            // Jika gagal (misalnya, offline), cari di dalam cache.
            return caches.match(event.request);
        })
    );
});
===== ./utils.js =====
/**
 * utils.js - Berisi fungsi bantuan seperti format mata uang dan ekspor data.
 */

// Fungsi untuk memformat angka menjadi format mata uang Rupiah
function formatCurrency(amount) {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0
    }).format(amount);
}

// Fungsi untuk mengekspor semua data ke format JSON
async function exportToJSON() {
    try {
        const totalBudget = await getConfig('totalBudget') || 0;
        const categories = await getCategories();
        const expenses = await getExpenses();

        const dataToExport = {
            pengaturan: {
                totalAnggaran: totalBudget,
                dieksporPada: new Date().toISOString()
            },
            kategori: categories.map(c => ({ nama: c.name, limit: c.limit })),
            riwayatPengeluaran: expenses.map(e => ({
                jumlah: e.amount,
                id_kategori: e.categoryId,
                deskripsi: e.description,
                tanggal: e.date
            }))
        };

        const jsonString = JSON.stringify(dataToExport, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `dompet-damai-backup-${new Date().toISOString().slice(0, 10)}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        console.log('Ekspor JSON berhasil.');

    } catch (error) {
        console.error('Gagal mengekspor data ke JSON:', error);
        alert('Gagal mengekspor data.');
    }
}

// Fungsi untuk mengekspor riwayat pengeluaran ke format CSV
async function exportToCSV() {
    try {
        const expenses = await getExpenses();
        if (expenses.length === 0) {
            alert('Tidak ada riwayat pengeluaran untuk diekspor.');
            return;
        }
        
        const categories = await getCategories();
        const categoryMap = new Map(categories.map(cat => [cat.id, cat.name]));

        let csvContent = "data:text/csv;charset=utf-8,";
        // Header CSV
        csvContent += "Tanggal,Kategori,Deskripsi,Jumlah\r\n";

        expenses.forEach(exp => {
            const date = new Date(exp.date).toLocaleString('id-ID');
            const categoryName = categoryMap.get(exp.categoryId) || 'Tidak Diketahui';
            const description = exp.description ? `"${exp.description.replace(/"/g, '""')}"` : '';
            csvContent += `${date},${categoryName},${description},${exp.amount}\r\n`;
        });

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `riwayat-pengeluaran-${new Date().toISOString().slice(0, 10)}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        console.log('Ekspor CSV berhasil.');

    } catch (error) {
        console.error('Gagal mengekspor data ke CSV:', error);
        alert('Gagal mengekspor data.');
    }
}

